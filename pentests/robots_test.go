package pentests

import (
	"bytes"
	"io/ioutil"
	"log"
	"net/http"
	"net/http/httptest"
	"os"
	"path/filepath"
	"testing"
)

func TestRobotsTXT(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		server            *httptest.Server
		robotsTXTfilename string
		expectedContent   []byte
	}{
		{
			testRobotsTXTServer200(),
			"robots.txt",
			[]byte("User-agent: *\nDisallow: /admin\nDisallow: /account\nDisallow: /course/progress\nDisallow: /openid\nDisallow: /wiki\nDisallow: /coach\n\nSitemap: https://www.udacity.com/sitemap.xml"),
		},
		{
			testRobotsTXTServer404(),
			"404-robots.txt",
			[]byte("GET /robots.txt responded with a status code of 404 and the following response body:\n\n<html>\n\t<body>\n\t<p>This is an error page.</p>\n\t</body>\n</html>"),
		},
	}

	for _, tc := range testCases {
		t.Run(tc.robotsTXTfilename, func(t *testing.T) {
			defer tc.server.Close()

			// Check for robots.txt on server at URL.
			err := RobotsTXT(tc.server.URL)
			if err != nil {
				t.Error(err)
			}

			// Check for expected, downloaded file and attempt to read it.
			dirName := directoryName(tc.server.URL)
			robotsTXTfilepath := filepath.Join(dirName, tc.robotsTXTfilename)
			content, err := ioutil.ReadFile(robotsTXTfilepath)
			if err != nil {
				t.Error(err)
			}

			// Compare file contents with the expected contents.
			if !bytes.Equal(content, tc.expectedContent) {
				t.Errorf("expected robotsTXTcontents to equal %q, got %q", tc.expectedContent, content)
			}

			// Clean up.
			err = os.RemoveAll(dirName)
			if err != nil {
				t.Error(err)
			}
		})
	}
}

func testRobotsTXTServer200() *httptest.Server {
	return httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
		respBody := "User-agent: *\nDisallow: /admin\nDisallow: /account\nDisallow: /course/progress\nDisallow: /openid\nDisallow: /wiki\nDisallow: /coach\n\nSitemap: https://www.udacity.com/sitemap.xml"
		w.WriteHeader(http.StatusOK)
		_, err := w.Write([]byte(respBody))
		if err != nil {
			log.Fatal(err)
		}
	}))
}

func testRobotsTXTServer404() *httptest.Server {
	return httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
		respBody := "<html>\n\t<body>\n\t<p>This is an error page.</p>\n\t</body>\n</html>"
		w.WriteHeader(http.StatusNotFound)
		_, err := w.Write([]byte(respBody))
		if err != nil {
			log.Fatal(err)
		}
	}))
}
